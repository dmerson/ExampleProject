//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RecordKeeping
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamplesDBEntities : DbContext
    {
        public ExamplesDBEntities()
            : base("name=ExamplesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PersonalRecord> PersonalRecords { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<GetPersonalData> GetPersonalDatas { get; set; }
    
        public virtual ObjectResult<GetPersonsByYear_Result> GetPersonsByYear(Nullable<int> yearToCheck)
        {
            var yearToCheckParameter = yearToCheck.HasValue ?
                new ObjectParameter("YearToCheck", yearToCheck) :
                new ObjectParameter("YearToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonsByYear_Result>("GetPersonsByYear", yearToCheckParameter);
        }
    
        public virtual ObjectResult<InsertPerson_Result> InsertPerson(string firstname, string lastname, string address1, string address2, string city, string stateCode, string zip)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertPerson_Result>("InsertPerson", firstnameParameter, lastnameParameter, address1Parameter, address2Parameter, cityParameter, stateCodeParameter, zipParameter);
        }
    }
}
